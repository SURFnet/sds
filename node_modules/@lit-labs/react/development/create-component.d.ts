/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
import * as ReactModule from 'react';
declare type Constructor<T> = {
    new (): T;
};
/***
 * Typecast that curries an Event type through a string. The goal of the type
 * cast is to match a prop name to a typed event callback.
 */
export declare type EventName<T extends Event = Event> = string & {
    __event_type: T;
};
declare type Events = Record<string, EventName | string>;
declare type EventProps<R extends Events> = {
    [K in keyof R]: R[K] extends EventName ? (e: R[K]['__event_type']) => void : (e: Event) => void;
};
/**
 * Creates a React component for a custom element. Properties are distinguished
 * from attributes automatically, and events can be configured so they are
 * added to the custom element as event listeners.
 *
 * @param React The React module, typically imported from the `react` npm
 * package.
 * @param tagName The custom element tag name registered via
 * `customElements.define`.
 * @param elementClass The custom element class registered via
 * `customElements.define`.
 * @param events An object listing events to which the component can listen. The
 * object keys are the event property names passed in via React props and the
 * object values are the names of the corresponding events generated by the
 * custom element. For example, given `{onactivate: 'activate'}` an event
 * function may be passed via the component's `onactivate` prop and will be
 * called when the custom element fires its `activate` event.
 * @param displayName A React component display name, used in debugging
 * messages. Default value is inferred from the name of custom element class
 * registered via `customElements.define`.
 */
export declare const createComponent: <I extends HTMLElement, E extends Events>(React: typeof ReactModule, tagName: string, elementClass: Constructor<I>, events?: E | undefined, displayName?: string | undefined) => ReactModule.ForwardRefExoticComponent<ReactModule.PropsWithRef<Partial<Omit<I, "children">> & Partial<EventProps<E>> & Omit<ReactModule.HTMLAttributes<HTMLElement>, keyof E>> & {
    children?: ReactModule.ReactNode;
} & ReactModule.RefAttributes<unknown>>;
export {};
//# sourceMappingURL=create-component.d.ts.map